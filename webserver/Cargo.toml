[package]
name = "webserver"
version = "0.1.0"
edition = "2021"
default-run = "webserver" # needed as we have multiple binaries

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[[bin]]
# main webserver binary, but just the wrapper around the libwebserver
name = "webserver"
path = "src/main.rs"

[lib]
# almost all code lives here, eases testing to have in a library
name = "libwebserver"
path = "src/lib.rs"

[[bin]]
# CLI utility for mananging passwords
name = "webserver_passwd"
path = "src/webserver_passwd_cli.rs"
required-features = ["cli"]

[[bin]]
name = "router-graph"
path = "src/router-graph.rs"

[[bin]]
# CLI utility for mananging passwords
name = "netdebug_cli"
path = "src/cli.rs"
## Consider uncommenting if we want to improve build speeds
# required-features = ["cli"]

[features]
cli = []

[dependencies]
# pls keep in alpha order
chrono = "0.4.26"
clap = { workspace = true }
common = { path = "../common" }
common-wasm = { path = "../common/wasm" }
# move back to the public branch once https://github.com/JulianSchmid/etherparse/pull/66 is merged
# NOTE: 0.14.0 looks like it breaks partial IpHeader::from_slice() parsing
# See https://github.com/JulianSchmid/etherparse/issues/46
#etherparse = "0.13.0"
etherparse = { git = "https://github.com/robs-zeynet/etherparse", branch = "tcp_header" }
futures = "0.3.28"
futures-util = "0.3.28"
libconntrack = { path = "../libconntrack" }
libconntrack-wasm = { path = "../libconntrack-wasm" }
log = "0.4.18"
indexmap = { workspace = true, features = ["serde"] }
itertools = "0.11.0"
native-tls = "0.2"
pcap = "1.1.0"
postgres-native-tls = "0.5"
pwhash = "1.0.0"
rand = "0.8.5"
rusqlite = { version = "0.29.0", features = ["bundled", "blob"] }
tokio-rusqlite = "0.4.0"
tokio-postgres = { version = "0.7", features = ["with-chrono-0_4"] }
serde = { version = "1.0.163", features = ["derive"] }
serde_json = "1.0.96"
tokio = { version = "1.28.2", features = ["full"] }
warp = { version = "0.3.5", features = ["tls"] }

[dev-dependencies]
# dynamically + programatically instantiate a postgres server locally
# used for remotedb_client testing
pg-embed = { git = "https://github.com/faokunega/pg-embed/", default-features = false, features = [
    "rt_tokio",
    "rt_tokio_migrate",
] }
