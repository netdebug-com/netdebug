name: GitHub Rust CI
run-name: ${{ github.actor }} GitHub Actions 🚀
on:
  pull_request:
  push:
    branches: ["main"]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - name: Formatting check (rust)
        # Check the formatting early; this should be done by vscode and/or githooks, but ... sigh
        run: cargo fmt --check
      - name: Formatting check (prettier)
        uses: actionsx/prettier@v3
        with:
          # prettier CLI arguments.
          args: --check .
      - name: Get wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          # Optional version of wasm-pack to install(eg. 'v0.9.1', 'latest')
          version: "latest"
      - name: Install libpcap
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Cargo build
        run: |
          cargo build --all-features --verbose  --release
      - name: wasm-pack webserver
        run: |
          wasm-pack build webserver/web-client --target web
          # if you get '--target web' important!
      - name: cargo test
        run: |
          cargo test
          # FIXME 'cargo test' without 'cargo build' doesn't work as
          # it does not correctly depend on the wasm-pack tool
          # but for now, just manually work around by doing both in same step
      - name: wasm-pack test
        run: |
          wasm-pack test --headless --chrome webserver/web-client/
      - name: Node and npm
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: electron/package-lock.json
      - run: cd electron && npm ci
      - run: cd electron && npm run lint
      - run: cd electron && npm run test
      # The `npm run package` step will surface any typescript type errors.
      # There must be an easier way to do so but I haven't found one yet.
      # Note, that `run test` will find typescript errors only in files that
      # are included in tests....
      - run: cd electron && npm run package
      - run: echo "🍏 This job's status is ${{ job.status }}."
# this was needed for the 'cargo-feature[per-package-target]'
# but nightly is unstable and it also breaks 'cargo test' so remove for now
#      - name: Set rust nighty toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#            toolchain: nightly
#            override: true
