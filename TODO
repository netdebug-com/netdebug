* Plot the endhost and the nat datapoints!
* Add summarization logic to ProbeReport - common to client and server
* Figure out why we're seeing multiple hopcounts/pathsin the same TCP stream - route flaps?
  * make sure we're plotting the same points in the same ttl!
* deleting old connections after FIN/RST
* move to LRUHashMap for connections in case they go away ungracefully
* Add DNS lookups for ProbeReports
* build a "CLI Client" for testing and general usefulness



Fix these:

thread 'tokio-runtime-worker' panicked at 'not yet implemented', webserver/src/owned_packet.rs:248:28
stack backtrace:
   0: rust_begin_unwind
             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/panicking.rs:578:5
   1: core::panicking::panic_fmt
             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/panicking.rs:67:14
   2: core::panicking::panic
             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/panicking.rs:117:5
   3: libwebserver::owned_packet::OwnedParsedPacket::to_connection_key
   4: libwebserver::connection::ConnectionTracker<R>::add
   5: libwebserver::context::WebServerContext::new::{{closure}}
   6: tokio::loom::std::unsafe_cell::UnsafeCell<T>::with_mut
   7: tokio::runtime::task::core::Core<T,S>::poll
   8: tokio::runtime::task::harness::Harness<T,S>::poll
   9: tokio::runtime::scheduler::multi_thread::worker::Context::run_task
  10: tokio::runtime::scheduler::multi_thread::worker::Context::run
  11: tokio::macros::scoped_tls::ScopedKey<T>::set
  12: tokio::runtime::scheduler::multi_thread::worker::run
  13: tokio::loom::std::unsafe_cell::UnsafeCell<T>::with_mut
  14: tokio::runtime::task::core::Core<T,S>::poll
  15: tokio::runtime::task::harness::Harness<T,S>::poll
  16: tokio::runtime::blocking::pool::Inner::run
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'tokio-runtime-worker' panicked at 'called `Result::unwrap()` on an `Err` value: SendError(Pkt(OwnedParsedPacket { pcap_header: PacketHeader { ts: 1688469654.051489, caplen: 86, len: 86 }, link: Some(Ethernet2Header { source: [6, 80, 62, 184, 207, 233], destination: [6, 149, 134, 32, 37, 65], ether_type: 2048 }), vlan: None, ip: Some(Version4(Ipv4Header { ihl: 5, differentiated_services_code_point: 10, explicit_congestion_notification: 0, payload_len: 52, identification: 16454, dont_fragment: false, more_fragments: false, fragments_offset: 0, time_to_live: 38, protocol: 1, header_checksum: 12268, source: [45, 83, 64, 1], destination: [172, 31, 10, 232], options: [] }, Ipv4Extensions { auth: None })), transport: Some(Icmpv4(Icmpv4Header { icmp_type: Redirect(RedirectHeader { code: RedirectForHost, gateway_internet_address: [93, 92, 133, 73] }), checksum: 23852 })), payload: [69, 0, 0, 44, 0, 0, 64, 0, 49, 6, 5, 24, 52, 53, 155, 175, 194, 187, 178, 20, 0, 22, 127, 21, 106, 5, 142, 153, 204, 177, 73, 19, 96, 18, 250, 240, 202, 225, 0, 0, 2, 4, 5, 180] }))', /home/ubuntu/netdebug/webserver/src/pcap.rs:75:61
stack backtrace:
   0: rust_begin_unwind
             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/panicking.rs:578:5
   1: core::panicking::panic_fmt
             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/panicking.rs:67:14
   2: core::result::unwrap_failed
             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/result.rs:1687:5
   3: <futures_util::stream::stream::for_each::ForEach<St,Fut,F> as core::future::future::Future>::poll
   4: webserver::main::{{closure}}::{{closure}}
   5: tokio::loom::std::unsafe_cell::UnsafeCell<T>::with_mut
   6: tokio::runtime::task::core::Core<T,S>::poll
   7: tokio::runtime::task::harness::Harness<T,S>::poll
   8: tokio::runtime::scheduler::multi_thread::worker::Context::run_task
   9: tokio::runtime::scheduler::multi_thread::worker::Context::run
  10: tokio::macros::scoped_tls::ScopedKey<T>::set
  11: tokio::runtime::scheduler::multi_thread::worker::run
  12: tokio::loom::std::unsafe_cell::UnsafeCell<T>::with_mut
  13: tokio::runtime::task::core::Core<T,S>::poll
  14: tokio::runtime::task::harness::Harness<T,S>::poll
  15: tokio::runtime::blocking::pool::Inner::run
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

